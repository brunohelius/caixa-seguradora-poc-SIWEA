import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Starting Puppeteer E2E Tests\n');

const browser = await puppeteer.launch({
  headless: true,
  args: ['--no-sandbox', '--disable-setuid-sandbox']
});

try {
  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });

  // Create screenshots directory
  const screenshotsDir = path.join(__dirname, 'puppeteer-screenshots');
  if (!fs.existsSync(screenshotsDir)) {
    fs.mkdirSync(screenshotsDir, { recursive: true });
  }

  let results = [];

  // Test 1: Load main page
  console.log('Testing: Main page load...');
  try {
    const response = await page.goto('http://localhost:5173/', {
      waitUntil: 'networkidle0',
      timeout: 30000
    });
    const status = response.status();
    results.push(`Main page load: ${status === 200 ? '‚úÖ PASS' : '‚ùå FAIL'} (Status: ${status})`);

    await page.screenshot({
      path: path.join(screenshotsDir, 'main-page.png'),
      fullPage: true
    });
  } catch (error) {
    results.push(`Main page load: ‚ùå FAIL - ${error.message}`);
  }

  // Test 2: Check for form elements
  console.log('Testing: Form elements...');
  try {
    const forms = await page.$$('form');
    const inputs = await page.$$('input');
    const buttons = await page.$$('button');

    results.push(`Form elements: ${forms.length > 0 ? '‚úÖ PASS' : '‚ùå FAIL'} - Forms: ${forms.length}, Inputs: ${inputs.length}, Buttons: ${buttons.length}`);
  } catch (error) {
    results.push(`Form elements: ‚ùå FAIL - ${error.message}`);
  }

  // Test 3: Navigate to claims/search
  console.log('Testing: Claims/search navigation...');
  try {
    await page.goto('http://localhost:5173/claims/search', {
      waitUntil: 'networkidle0',
      timeout: 30000
    });
    const url = page.url();
    results.push(`Claims/search navigation: ${url.includes('/claims/search') ? '‚úÖ PASS' : '‚ùå FAIL'}`);

    await page.screenshot({
      path: path.join(screenshotsDir, 'claims-search.png'),
      fullPage: true
    });
  } catch (error) {
    results.push(`Claims/search navigation: ‚ùå FAIL - ${error.message}`);
  }

  // Test 4: Navigate to dashboard
  console.log('Testing: Dashboard navigation...');
  try {
    await page.goto('http://localhost:5173/dashboard', {
      waitUntil: 'networkidle0',
      timeout: 30000
    });
    const url = page.url();
    results.push(`Dashboard navigation: ${url.includes('/dashboard') ? '‚úÖ PASS' : '‚ùå FAIL'}`);

    await page.screenshot({
      path: path.join(screenshotsDir, 'dashboard.png'),
      fullPage: true
    });
  } catch (error) {
    results.push(`Dashboard navigation: ‚ùå FAIL - ${error.message}`);
  }

  // Test 5: Check for CSS classes
  console.log('Testing: CSS classes...');
  try {
    await page.goto('http://localhost:5173/', {
      waitUntil: 'networkidle0',
      timeout: 30000
    });

    const elementsWithClasses = await page.$$('[class*="bg-"], [class*="text-"], [class*="flex"], [class*="grid"]');
    results.push(`CSS classes: ${elementsWithClasses.length > 0 ? '‚úÖ PASS' : '‚ùå FAIL'} - Found ${elementsWithClasses.length} styled elements`);
  } catch (error) {
    results.push(`CSS classes: ‚ùå FAIL - ${error.message}`);
  }

  // Generate report
  const report = `# Puppeteer E2E Test Report

**Test Date**: ${new Date().toISOString()}
**Test Environment**: http://localhost:5173/

## Test Results

${results.map(r => `- ${r}`).join('\n')}

## Screenshots
- Main Page: \`puppeteer-screenshots/main-page.png\`
- Claims Search: \`puppeteer-screenshots/claims-search.png\`
- Dashboard: \`puppeteer-screenshots/dashboard.png\`

---
*Generated by Puppeteer Test Suite*
`;

  fs.writeFileSync('puppeteer-test-report.md', report);
  console.log('\n‚úÖ Report saved to puppeteer-test-report.md');
  console.log('\nüìä Test Results:');
  results.forEach(r => console.log(`  ${r}`));

} catch (error) {
  console.error('‚ùå Test suite error:', error);
} finally {
  await browser.close();
}