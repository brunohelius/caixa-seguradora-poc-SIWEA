import puppeteer from 'puppeteer';
import fs from 'fs';

console.log('üß© Starting Component Validation Tests\n');

const browser = await puppeteer.launch({
  headless: true,
  args: ['--no-sandbox', '--disable-setuid-sandbox']
});

try {
  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });

  console.log('üìÑ Loading application...');
  await page.goto('http://localhost:5173/claims/search', {
    waitUntil: 'networkidle0',
    timeout: 30000
  });

  let results = [];

  // Test 1: Button components
  console.log('\nüîò Testing Button components...');
  const buttons = await page.$$('button');
  const buttonCount = buttons.length;
  results.push(`Buttons: ${buttonCount > 0 ? `‚úÖ ${buttonCount} found` : '‚ùå None found'}`);

  // Test 2: Input components
  console.log('üìù Testing Input components...');
  const inputs = await page.$$('input:not([type="hidden"])');
  const inputCount = inputs.length;
  results.push(`Inputs: ${inputCount > 0 ? `‚úÖ ${inputCount} found` : '‚ùå None found'}`);

  // Test 3: Label components
  console.log('üè∑Ô∏è Testing Label components...');
  const labels = await page.$$('label');
  const labelCount = labels.length;
  results.push(`Labels: ${labelCount > 0 ? `‚úÖ ${labelCount} found` : '‚ùå None found'}`);

  // Test 4: Card components
  console.log('üóÇÔ∏è Testing Card components...');
  const cards = await page.$$('[class*="card"], [class*="rounded"][class*="border"]');
  const cardCount = cards.length;
  results.push(`Cards: ${cardCount > 0 ? `‚úÖ ${cardCount} found` : '‚ùå None found'}`);

  // Test 5: Table components
  console.log('üìä Testing Table components...');
  const tables = await page.$$('table');
  const tableCount = tables.length;
  results.push(`Tables: ${tableCount > 0 ? `‚úÖ ${tableCount} found` : '‚ùå None found'}`);

  // Test 6: RadioGroup components
  console.log('‚≠ï Testing RadioGroup components...');
  const radios = await page.$$('input[type="radio"]');
  const radioCount = radios.length;
  results.push(`Radio buttons: ${radioCount > 0 ? `‚úÖ ${radioCount} found` : '‚ùå None found'}`);

  // Test 7: Keyboard navigation
  console.log('\n‚å®Ô∏è Testing keyboard navigation...');
  const focusableElements = await page.$$('button, input, select, textarea, a[href], [tabindex]:not([tabindex="-1"])');
  const focusableCount = focusableElements.length;
  results.push(`Focusable elements: ${focusableCount > 0 ? `‚úÖ ${focusableCount} found` : '‚ùå None found'}`);

  // Test 8: ARIA attributes
  console.log('‚ôø Testing accessibility attributes...');
  const ariaLabels = await page.$$('[aria-label], [aria-labelledby]');
  const ariaCount = ariaLabels.length;
  results.push(`ARIA labels: ${ariaCount > 0 ? `‚úÖ ${ariaCount} found` : '‚ùå None found'}`);

  // Navigate to dashboard
  console.log('\nüìÑ Testing Dashboard page...');
  await page.goto('http://localhost:5173/dashboard', {
    waitUntil: 'networkidle0',
    timeout: 30000
  });

  // Test 9: Progress components
  console.log('üìà Testing Progress components...');
  const progressBars = await page.$$('[role="progressbar"], [class*="progress"]');
  const progressCount = progressBars.length;
  results.push(`Progress bars: ${progressCount > 0 ? `‚úÖ ${progressCount} found` : '‚ùå None found'}`);

  // Test 10: Badge components
  console.log('üèÜ Testing Badge components...');
  const badges = await page.$$('[class*="badge"]');
  const badgeCount = badges.length;
  results.push(`Badges: ${badgeCount > 0 ? `‚úÖ ${badgeCount} found` : '‚ùå None found'}`);

  // Generate report
  const report = `# Component Validation Report

**Test Date**: ${new Date().toISOString()}
**Test Environment**: http://localhost:5173/

## Component Test Results

${results.map(r => `- ${r}`).join('\n')}

## shadcn/ui Component Summary

‚úÖ **Found Components:**
${results.filter(r => r.includes('‚úÖ')).map(r => `- ${r.split(':')[0]}`).join('\n')}

‚ùå **Missing Components:**
${results.filter(r => r.includes('‚ùå')).length > 0 ?
  results.filter(r => r.includes('‚ùå')).map(r => `- ${r.split(':')[0]}`).join('\n') :
  'None - All components found!'}

## Overall Status
${results.filter(r => r.includes('‚ùå')).length === 0 ?
  '‚úÖ All component types detected successfully!' :
  `‚ö†Ô∏è ${results.filter(r => r.includes('‚ùå')).length} component types need attention`}

---
*Generated by Component Validation Test Suite*
`;

  fs.writeFileSync('component-validation-report.md', report);
  console.log('\n‚úÖ Report saved to component-validation-report.md');
  console.log('\nüìä Test Results:');
  results.forEach(r => console.log(`  ${r}`));

} catch (error) {
  console.error('‚ùå Test suite error:', error);
} finally {
  await browser.close();
}