import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üé® Starting Visual Regression Tests\n');

const viewports = [
  { name: 'mobile', width: 375, height: 667 },
  { name: 'tablet', width: 768, height: 1024 },
  { name: 'desktop', width: 1920, height: 1080 }
];

const pages = [
  { name: 'home', url: 'http://localhost:5173/' },
  { name: 'claims-search', url: 'http://localhost:5173/claims/search' },
  { name: 'dashboard', url: 'http://localhost:5173/dashboard' }
];

const browser = await puppeteer.launch({
  headless: true,
  args: ['--no-sandbox', '--disable-setuid-sandbox']
});

try {
  const page = await browser.newPage();
  let results = [];
  let issues = [];

  // Create screenshots directory
  const screenshotsDir = path.join(__dirname, 'visual-regression-screenshots');
  if (!fs.existsSync(screenshotsDir)) {
    fs.mkdirSync(screenshotsDir, { recursive: true });
  }

  for (const pageConfig of pages) {
    console.log(`üìÑ Testing page: ${pageConfig.name}`);

    for (const viewport of viewports) {
      console.log(`  üì± ${viewport.name} (${viewport.width}x${viewport.height})`);

      await page.setViewport(viewport);

      try {
        await page.goto(pageConfig.url, {
          waitUntil: 'networkidle0',
          timeout: 30000
        });

        await new Promise(resolve => setTimeout(resolve, 1000));

        // Check for horizontal scroll
        const scrollData = await page.evaluate(() => {
          return {
            scrollWidth: document.documentElement.scrollWidth,
            clientWidth: document.documentElement.clientWidth,
            hasHorizontalScroll: document.documentElement.scrollWidth > document.documentElement.clientWidth
          };
        });

        if (scrollData.hasHorizontalScroll) {
          issues.push(`${pageConfig.name} - ${viewport.name}: Horizontal scroll detected`);
        }

        // Take screenshot
        const screenshotPath = path.join(
          screenshotsDir,
          `${pageConfig.name}-${viewport.name}.png`
        );

        await page.screenshot({
          path: screenshotPath,
          fullPage: true
        });

        results.push({
          page: pageConfig.name,
          viewport: viewport.name,
          hasHorizontalScroll: scrollData.hasHorizontalScroll,
          status: scrollData.hasHorizontalScroll ? 'FAIL' : 'PASS'
        });

        console.log(`    ‚úÖ Screenshot captured`);
        console.log(`    üìê Horizontal scroll: ${scrollData.hasHorizontalScroll ? '‚ùå Yes' : '‚úÖ No'}`);

      } catch (error) {
        console.error(`    ‚ùå Error: ${error.message}`);
        issues.push(`${pageConfig.name} - ${viewport.name}: ${error.message}`);
      }
    }
  }

  // Generate report
  const report = `# Visual Regression Test Report

**Test Date**: ${new Date().toISOString()}
**Test Environment**: http://localhost:5173/

## Test Summary
- **Total Tests**: ${results.length}
- **Passed**: ${results.filter(r => r.status === 'PASS').length}
- **Failed**: ${results.filter(r => r.status === 'FAIL').length}

## Viewport Test Results

${results.map(r =>
  `- ${r.page} (${r.viewport}): ${r.status} ${r.hasHorizontalScroll ? '- Horizontal scroll detected' : ''}`
).join('\n')}

## Issues Detected
${issues.length > 0 ? issues.map(i => `- ${i}`).join('\n') : '‚úÖ No issues detected'}

## Screenshots
All screenshots saved to: \`visual-regression-screenshots/\`

---
*Generated by Visual Regression Test Suite*
`;

  fs.writeFileSync('visual-regression-report.md', report);
  console.log('\n‚úÖ Report saved to visual-regression-report.md');

} catch (error) {
  console.error('‚ùå Test suite error:', error);
} finally {
  await browser.close();
}